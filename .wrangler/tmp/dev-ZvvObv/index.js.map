{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Tak06O/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-Tak06O/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/omshewale/cloudfare_demo/.wrangler/tmp/dev-ZvvObv",
  "sourcesContent": ["export interface Env {\n\tAI: Ai;\n\tCHAT_ROOM: DurableObjectNamespace;\n\tMODEL: string;\n\tAPP_NAME: string;\n}\n\nconst worker: ExportedHandler<Env> = {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\t\tconst url = new URL(request.url);\n\n\t\tif (url.pathname === \"/api/chat\" && request.method === \"POST\") {\n\t\t\treturn handleChat(request, env);\n\t\t}\n\n\t\t// Fallback to static assets served from /public\n\t\tif (url.pathname === \"/\" || url.pathname.startsWith(\"/assets\") || url.pathname.endsWith(\".html\") || url.pathname === \"/favicon.ico\") {\n\t\t\treturn serveStatic(env, request);\n\t\t}\n\n\t\treturn new Response(\"Not found\", { status: 404 });\n\t},\n};\n\nexport default worker;\n\nasync function handleChat(request: Request, env: Env): Promise<Response> {\n\tconst body = await request.json().catch(() => null) as { room?: string; message?: string } | null;\n\tif (!body || !body.message) {\n\t\treturn Response.json({ error: \"Missing message\" }, { status: 400 });\n\t}\n\tconst roomName = body.room || \"default\";\n\tconst id = env.CHAT_ROOM.idFromName(roomName);\n\tconst stub = env.CHAT_ROOM.get(id);\n\treturn stub.fetch(\"https://do/chat\", { method: \"POST\", body: JSON.stringify({ message: body.message }) });\n}\n\nasync function serveStatic(env: Env, request: Request): Promise<Response> {\n\t// Basic inline HTML as fallback if asset binding not available.\n\tconst html = `<!doctype html>\n<html>\n<head>\n\t<meta charset=\"utf-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n\t<title>${env.APP_NAME}</title>\n\t<style>\n\tbody{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;margin:0;background:#0f172a;color:#e2e8f0}\n\t.container{max-width:720px;margin:0 auto;padding:16px}\n\theader{padding:12px 0;margin-bottom:8px}\n\t.card{background:#111827;border:1px solid #1f2937;border-radius:8px;padding:12px}\n\t.row{display:flex;gap:8px}\n\tinput,button{font-size:16px}\n\tinput{flex:1;padding:10px;border-radius:6px;border:1px solid #334155;background:#0b1220;color:#e2e8f0}\n\tbutton{padding:10px 14px;border-radius:6px;border:1px solid #334155;background:#2563eb;color:white}\n\t.chat{display:flex;flex-direction:column;gap:8px;margin-top:12px}\n\t.msg{padding:10px;border-radius:6px}\n\t.user{background:#1e293b}\n\t.ai{background:#0b1220}\n\t.small{opacity:.7;font-size:12px}\n\t</style>\n</head>\n<body>\n\t<div class=\"container\">\n\t\t<header>\n\t\t\t<h2>${env.APP_NAME}</h2>\n\t\t\t<p class=\"small\">Minimal chat using Workers AI (Llama) + Durable Object memory.</p>\n\t\t</header>\n\t\t<div class=\"card\">\n\t\t\t<div id=\"chat\" class=\"chat\"></div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<input id=\"input\" placeholder=\"Type your message...\" />\n\t\t\t\t<button id=\"send\">Send</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<script type=\"module\">\n\tconst chat = document.getElementById('chat');\n\tconst input = document.getElementById('input');\n\tconst send = document.getElementById('send');\n\tconst room = 'default';\n\tfunction append(text, who){\n\t\tconst div = document.createElement('div');\n\t\tdiv.className = 'msg ' + who;\n\t\tdiv.textContent = text;\n\t\tchat.appendChild(div);\n\t\tchat.scrollTop = chat.scrollHeight;\n\t}\n\tsend.addEventListener('click', async () => {\n\t\tconst message = input.value.trim();\n\t\tif(!message) return;\n\t\tappend(message, 'user');\n\t\tinput.value = '';\n\t\tconst res = await fetch('/api/chat', {method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ room, message })});\n\t\tif(!res.ok){ append('Error: ' + res.status, 'ai'); return; }\n\t\tconst data = await res.json();\n\t\tappend(data.reply, 'ai');\n\t});\n\tinput.addEventListener('keydown', e => { if(e.key==='Enter') send.click(); });\n\t</script>\n</body>\n</html>`;\n\treturn new Response(html, { headers: { \"content-type\": \"text/html; charset=utf-8\" } });\n}\n\nexport class ChatRoom implements DurableObject {\n\tstate: DurableObjectState;\n\tenv: Env;\n\tconstructor(state: DurableObjectState, env: Env) {\n\t\tthis.state = state;\n\t\tthis.env = env;\n\t}\n\t// Store last N messages in durable state memory\n\tasync fetch(request: Request): Promise<Response> {\n\t\tconst url = new URL(request.url);\n\t\tif (url.pathname === \"/chat\" && request.method === \"POST\") {\n\t\t\tconst { message } = await request.json() as { message: string };\n\t\t\tif (!message) return Response.json({ error: \"Missing message\" }, { status: 400 });\n\n\t\t\tconst history: { role: \"user\" | \"assistant\" | \"system\"; content: string }[] = (await this.state.storage.get(\"history\")) || [];\n\t\t\thistory.push({ role: \"user\", content: message });\n\n\t\t\tconst model = (this.env.MODEL || \"@cf/meta/llama-3.1-8b-instruct\") as any;\n\t\t\tconst systemPrompt = \"You are a concise helpful assistant. Keep replies short.\";\n\t\t\tconst response: any = await (this.env.AI as any).run(model, {\n\t\t\t\tmessages: [\n\t\t\t\t\t{ role: \"system\", content: systemPrompt },\n\t\t\t\t\t...history,\n\t\t\t\t],\n\t\t\t});\n\t\t\tconst reply: string = response?.response ?? \"(no response)\";\n\n\t\t\thistory.push({ role: \"assistant\", content: reply });\n\t\t\t// Cap memory to last 20 entries\n\t\t\tawait this.state.storage.put(\"history\", history.slice(-20));\n\n\t\t\treturn Response.json({ reply });\n\t\t}\n\t\treturn new Response(\"Not found\", { status: 404 });\n\t}\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/omshewale/cloudfare_demo/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/omshewale/cloudfare_demo/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/omshewale/cloudfare_demo/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/omshewale/cloudfare_demo/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/omshewale/cloudfare_demo/.wrangler/tmp/bundle-Tak06O/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/omshewale/cloudfare_demo/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/omshewale/cloudfare_demo/.wrangler/tmp/bundle-Tak06O/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/omshewale/cloudfare_demo/.wrangler/tmp/bundle-Tak06O/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["worker"]
}
